id: phs-dataset-pipeline
namespace: phs-dataset

inputs:
  - id: disease
    type: SELECT
    displayName: Select disease type
    values: [covid, respiratory]
    defaults: covid

variables:
  startDate: "{{trigger.previous | date('yyyyMMdd')}}"
  endDate: "{{trigger.date | date('yyyyMMdd')}}"
  queryCovid: "SELECT%20%2A%20from%20%22d304beee-badd-4d4d-b6cf-19651b303676%22%20WHERE%20%22WeekEnding%22%20%3E%3D%20{{render(vars.startDate)}}%20AND%20%22WeekEnding%22%20%3C%20{{render(vars.endDate)}}"
  queryResp: "SELECT%20%2A%20from%20%2275201270-269c-431b-9808-e52efe4c7b25%22%20WHERE%20%22WeekEnding%22%20%3E%3D%20{{render(vars.startDate)}}%20AND%20%22WeekEnding%22%20%3C%20{{render(vars.endDate)}}"
  jsonFile: "{{inputs.disease}}_{{vars.startDate}}_{{vars.endDate}}.json"
  csvFile: "{{inputs.disease}}_{{vars.startDate}}_{{vars.endDate}}.csv"
  gcs_path: "gs://{{kv('GCP_BUCKET_NAME')}}"

tasks:

  - id: ifCovid
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.disease == 'covid'}}"
    then:
      - id: extractCovid
        type: io.kestra.plugin.core.http.Download
        uri: https://www.opendata.nhs.scot/api/3/action/datastore_search_sql?sql={{render(vars.queryCovid)}}

      - id: upload_to_gs_raw_covid
        type: io.kestra.plugin.gcp.gcs.Upload
        from: "{{ outputs.extractCovid.uri }}"
        to: "{{render(vars.gcs_path)}}/raw/{{render(vars.jsonFile)}}"

      - id: jsonataCovid
        type: io.kestra.plugin.transform.jsonata.TransformItems
        from: "{{ outputs.extractCovid.uri }}"
        expression:
          result.records
        
      - id: resultCovid
        type: io.kestra.plugin.serdes.csv.IonToCsv
        from: "{{ outputs.jsonataCovid.uri }}"

      - id: upload_to_gs_covid
        type: io.kestra.plugin.gcp.gcs.Upload
        from: "{{ outputs.resultCovid.uri }}"
        to: "{{render(vars.gcs_path)}}/csv/{{render(vars.csvFile)}}"
      
      - id: bq_covid_data
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.covid_data`
          (
              unique_row_id BYTES OPTIONS (description = 'A unique identifier for the record, generated by hashing key record attributes.'),
              filename STRING OPTIONS (description = 'The source filename from which the record data was loaded.'),
              WeekEnding INT64 OPTIONS (description = ''),
              HealthBoardOfTreatment STRING OPTIONS (description = ''),
              Admissions NUMERIC OPTIONS (description = ''),
          );
            
      - id: bq_covid_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.data_ext`
          (
            InpatientsAsAtLastSunday NUMERIC OPTIONS (description = ''),
            InpatientsSevenDayAverage NUMERIC OPTIONS (description = ''),
            HealthBoardOfTreatment STRING OPTIONS (description = ''),
            HealthBoardOfTreatmentQF STRING OPTIONS (description = ''),
            InpatientsAsAtLastSundayQF STRING OPTIONS (description = ''),
            _full_text STRING OPTIONS (description = ''),
            InpatientsSevenDayAverageQF STRING OPTIONS (description = ''),
            Admissions NUMERIC OPTIONS (description = ''),
            AdmissionsQF STRING OPTIONS (description = ''),
            _id INT64 OPTIONS (description = ''),
            WeekEnding INT64 OPTIONS (description = '')
          )
          OPTIONS (
              format = 'CSV',
              uris = ['{{render(vars.gcs_path)}}/csv/{{render(vars.csvFile)}}'],
              skip_leading_rows = 1
              );

      - id: bq_covid_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.data_tmp` AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(_id AS STRING), ""),
              COALESCE(CAST(WeekEnding AS STRING), ""),
              COALESCE(CAST(HealthBoardOfTreatment AS STRING), "")
            )) AS unique_row_id,
            "{{render(vars.csvFile)}}" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.data_ext`;
      
      - id: bq_covid_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.covid_data` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.data_tmp` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, filename, WeekEnding, HealthBoardOfTreatment, Admissions)
            VALUES (S.unique_row_id, S.filename, S.WeekEnding, S.HealthBoardOfTreatment, S.Admissions);

  - id: ifResp
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.disease == 'respiratory'}}"
    then:
      - id: extractResp
        type: io.kestra.plugin.core.http.Download
        uri: https://www.opendata.nhs.scot/api/3/action/datastore_search_sql?sql={{render(vars.queryResp)}}

      - id: upload_to_gs_raw_resp
        type: io.kestra.plugin.gcp.gcs.Upload
        from: "{{ outputs.extractResp.uri }}"
        to: "{{render(vars.gcs_path)}}/raw/{{render(vars.jsonFile)}}"
      
      - id: jsonataResp
        type: io.kestra.plugin.transform.jsonata.TransformItems
        from: "{{ outputs.extractResp.uri }}"
        expression:
          result.records
        
      - id: resultResp
        type: io.kestra.plugin.serdes.csv.IonToCsv
        from: "{{ outputs.jsonataResp.uri }}"
  
      - id: upload_to_gs_resp
        type: io.kestra.plugin.gcp.gcs.Upload
        from: "{{ outputs.resultResp.uri }}"
        to: "{{render(vars.gcs_path)}}/csv/{{render(vars.csvFile)}}"
      
      - id: bq_resp_data
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.resp_data`
          (
              unique_row_id BYTES OPTIONS (description = 'A unique identifier for the record, generated by hashing key record attributes.'),
              filename STRING OPTIONS (description = 'The source filename from which the record data was loaded.'),
              WeekEnding INT64 OPTIONS (description = ''),
              HealthBoardOfTreatment STRING OPTIONS (description = ''),
              InfluenzaAdmissions NUMERIC OPTIONS (description = ''),
              RSVAdmissions NUMERIC OPTIONS (description = '')
          );

      - id: bq_resp_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.data_ext`
          (
            RSVAdmissionsQF STRING,
            _id INT64,
            HealthBoardOfTreatment STRING,
            HealthBoardOfTreatmentQF STRING,
            InfluenzaAdmissionsQF STRING,
            _full_text STRING,
            RSVAdmissions NUMERIC,
            InfluenzaAdmissions NUMERIC,
            WeekEnding INT64
          )
          OPTIONS (
              format = 'CSV',
              uris = ['{{render(vars.gcs_path)}}/csv/{{render(vars.csvFile)}}'],
              skip_leading_rows = 1
              );

      - id: bq_resp_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.data_tmp`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(_id AS STRING), ""),
              COALESCE(CAST(WeekEnding AS STRING), ""),
              COALESCE(CAST(HealthBoardOfTreatment AS STRING), "")
            )) AS unique_row_id,
            "{{render(vars.csvFile)}}" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.data_ext`;


      - id: bq_resp_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.resp_data` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.data_tmp` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, filename, WeekEnding, HealthBoardOfTreatment, RSVAdmissions, InfluenzaAdmissions)
            VALUES (S.unique_row_id, S.filename, S.WeekEnding, S.HealthBoardOfTreatment, S.RSVAdmissions, S.InfluenzaAdmissions);
  
  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: This will remove output files. If you'd like to explore Kestra outputs, disable it.
  
  - id: delete_ext
    type: io.kestra.plugin.gcp.bigquery.DeleteTable
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    dataset: "{{kv('GCP_DATASET')}}"
    table: data_ext

  - id: delete_tmp
    type: io.kestra.plugin.gcp.bigquery.DeleteTable
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    dataset: "{{kv('GCP_DATASET')}}"
    table: data_tmp

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"


triggers:
  - id: covid_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 1 * * 1"
    inputs:
      disease: covid

  - id: respiratory_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 1 * * 1"
    inputs:
      disease: respiratory